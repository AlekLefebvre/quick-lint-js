// Code generated by tools/generate-diagnostic-metadata.cpp. DO NOT EDIT.
// source: src/quick-lint-js/diag/diagnostic-types-2.h

// Copyright (C) 2020  Matthew "strager" Glazar
// See end of file for extended copyright information.

#include <cstddef>
#include <quick-lint-js/diag/diagnostic-types-2.h>
#include <quick-lint-js/diag/diagnostic.h>
#include <quick-lint-js/port/constinit.h>

namespace quick_lint_js {
// clang-format off
const QLJS_CONSTINIT Diagnostic_Info_Debug all_diagnostic_infos_debug[] = {
    // Diag_Abstract_Field_Cannot_Have_Initializer
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Field_Cannot_Have_Initializer, equal)},
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Field_Cannot_Have_Initializer, abstract_keyword)},
      },
    },

    // Diag_Abstract_Methods_Cannot_Be_Async
    {
      .variables = {
        {.name = "async_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Methods_Cannot_Be_Async, async_keyword)},
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Methods_Cannot_Be_Async, abstract_keyword)},
      },
    },

    // Diag_Abstract_Methods_Cannot_Be_Generators
    {
      .variables = {
        {.name = "star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Methods_Cannot_Be_Generators, star)},
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Methods_Cannot_Be_Generators, abstract_keyword)},
      },
    },

    // Diag_Abstract_Property_Not_Allowed_In_Interface
    {
      .variables = {
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Property_Not_Allowed_In_Interface, abstract_keyword)},
      },
    },

    // Diag_Abstract_Property_Not_Allowed_In_Non_Abstract_Class
    {
      .variables = {
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Property_Not_Allowed_In_Non_Abstract_Class, abstract_keyword)},
        {.name = "class_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Property_Not_Allowed_In_Non_Abstract_Class, class_keyword)},
      },
    },

    // Diag_Abstract_Methods_Cannot_Contain_Bodies
    {
      .variables = {
        {.name = "body_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Abstract_Methods_Cannot_Contain_Bodies, body_start)},
      },
    },

    // Diag_Adjacent_JSX_Without_Parent
    {
      .variables = {
        {.name = "begin", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Adjacent_JSX_Without_Parent, begin)},
        {.name = "begin_of_second_element", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Adjacent_JSX_Without_Parent, begin_of_second_element)},
        {.name = "end", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Adjacent_JSX_Without_Parent, end)},
      },
    },

    // Diag_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses
    {
      .variables = {
        {.name = "parameter_and_annotation", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses, parameter_and_annotation)},
        {.name = "type_colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses, type_colon)},
      },
    },

    // Diag_TypeScript_Question_In_Type_Expression_Should_Be_Void
    {
      .variables = {
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Question_In_Type_Expression_Should_Be_Void, question)},
      },
    },

    // Diag_Assignment_Before_Variable_Declaration
    {
      .variables = {
        {.name = "assignment", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_Before_Variable_Declaration, assignment)},
        {.name = "declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_Before_Variable_Declaration, declaration)},
      },
    },

    // Diag_Assignment_Makes_Condition_Constant
    {
      .variables = {
        {.name = "assignment_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_Makes_Condition_Constant, assignment_operator)},
      },
    },

    // Diag_Assignment_To_Const_Global_Variable
    {
      .variables = {
        {.name = "assignment", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Const_Global_Variable, assignment)},
      },
    },

    // Diag_Assignment_To_Const_Variable
    {
      .variables = {
        {.name = "declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Const_Variable, declaration)},
        {.name = "assignment", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Const_Variable, assignment)},
        {.name = "var_kind", .type = Diagnostic_Arg_Type::variable_kind, .offset = offsetof(Diag_Assignment_To_Const_Variable, var_kind)},
      },
    },

    // Diag_Assignment_To_Imported_Variable
    {
      .variables = {
        {.name = "declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Imported_Variable, declaration)},
        {.name = "assignment", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Imported_Variable, assignment)},
        {.name = "var_kind", .type = Diagnostic_Arg_Type::variable_kind, .offset = offsetof(Diag_Assignment_To_Imported_Variable, var_kind)},
      },
    },

    // Diag_Assignment_To_Const_Variable_Before_Its_Declaration
    {
      .variables = {
        {.name = "declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Const_Variable_Before_Its_Declaration, declaration)},
        {.name = "assignment", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Const_Variable_Before_Its_Declaration, assignment)},
        {.name = "var_kind", .type = Diagnostic_Arg_Type::variable_kind, .offset = offsetof(Diag_Assignment_To_Const_Variable_Before_Its_Declaration, var_kind)},
      },
    },

    // Diag_Assignment_To_Undeclared_Variable
    {
      .variables = {
        {.name = "assignment", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Assignment_To_Undeclared_Variable, assignment)},
      },
    },

    // Diag_Await_Operator_Outside_Async
    {
      .variables = {
        {.name = "await_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Await_Operator_Outside_Async, await_operator)},
      },
    },

    // Diag_Await_Followed_By_Arrow_Function
    {
      .variables = {
        {.name = "await_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Await_Followed_By_Arrow_Function, await_operator)},
      },
    },

    // Diag_Async_Static_Method
    {
      .variables = {
        {.name = "async_static", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Async_Static_Method, async_static)},
      },
    },

    // Diag_Async_Export_Function
    {
      .variables = {
        {.name = "async_export", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Async_Export_Function, async_export)},
      },
    },

    // Diag_Declare_Class_Fields_Cannot_Have_Initializers
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Class_Fields_Cannot_Have_Initializers, equal)},
      },
    },

    // Diag_Declare_Class_Methods_Cannot_Be_Async
    {
      .variables = {
        {.name = "async_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Class_Methods_Cannot_Be_Async, async_keyword)},
      },
    },

    // Diag_Declare_Class_Methods_Cannot_Be_Generators
    {
      .variables = {
        {.name = "star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Class_Methods_Cannot_Be_Generators, star)},
      },
    },

    // Diag_Declare_Class_Methods_Cannot_Contain_Bodies
    {
      .variables = {
        {.name = "body_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Class_Methods_Cannot_Contain_Bodies, body_start)},
      },
    },

    // Diag_Declare_Abstract_Class_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Abstract_Class_Not_Allowed_In_JavaScript, declare_keyword)},
      },
    },

    // Diag_Declare_Class_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Class_Not_Allowed_In_JavaScript, declare_keyword)},
      },
    },

    // Diag_Declare_Function_Cannot_Be_Async
    {
      .variables = {
        {.name = "async_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Function_Cannot_Be_Async, async_keyword)},
      },
    },

    // Diag_Declare_Function_Cannot_Be_Generator
    {
      .variables = {
        {.name = "star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Function_Cannot_Be_Generator, star)},
      },
    },

    // Diag_Declare_Function_Cannot_Have_Body
    {
      .variables = {
        {.name = "body_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Function_Cannot_Have_Body, body_start)},
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Function_Cannot_Have_Body, declare_keyword)},
      },
    },

    // Diag_Declare_Function_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Function_Not_Allowed_In_JavaScript, declare_keyword)},
      },
    },

    // Diag_Declare_Keyword_Is_Not_Allowed_Inside_Declare_Namespace
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Keyword_Is_Not_Allowed_Inside_Declare_Namespace, declare_keyword)},
        {.name = "declare_namespace_declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Keyword_Is_Not_Allowed_Inside_Declare_Namespace, declare_namespace_declare_keyword)},
      },
    },

    // Diag_Declare_Namespace_Cannot_Contain_Statement
    {
      .variables = {
        {.name = "first_statement_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Namespace_Cannot_Contain_Statement, first_statement_token)},
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Namespace_Cannot_Contain_Statement, declare_keyword)},
      },
    },

    // Diag_Declare_Namespace_Cannot_Import_Module
    {
      .variables = {
        {.name = "importing_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Namespace_Cannot_Import_Module, importing_keyword)},
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Namespace_Cannot_Import_Module, declare_keyword)},
      },
    },

    // Diag_Declare_Var_Cannot_Have_Initializer
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Var_Cannot_Have_Initializer, equal)},
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Var_Cannot_Have_Initializer, declare_keyword)},
        {.name = "declaring_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Var_Cannot_Have_Initializer, declaring_token)},
      },
    },

    // Diag_Declare_Var_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Var_Not_Allowed_In_JavaScript, declare_keyword)},
        {.name = "declaring_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Declare_Var_Not_Allowed_In_JavaScript, declaring_token)},
      },
    },

    // Diag_Function_Async_Function
    {
      .variables = {
        {.name = "function_async", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Function_Async_Function, function_async)},
      },
    },

    // Diag_Big_Int_Literal_Contains_Decimal_Point
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Big_Int_Literal_Contains_Decimal_Point, where)},
      },
    },

    // Diag_Big_Int_Literal_Contains_Exponent
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Big_Int_Literal_Contains_Exponent, where)},
      },
    },

    // Diag_C_Style_For_Loop_Is_Missing_Third_Component
    {
      .variables = {
        {.name = "expected_last_component", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_C_Style_For_Loop_Is_Missing_Third_Component, expected_last_component)},
        {.name = "existing_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_C_Style_For_Loop_Is_Missing_Third_Component, existing_semicolon)},
      },
    },

    // Diag_Cannot_Assign_To_Loop_Variable_In_For_Of_Or_In_Loop
    {
      .variables = {
        {.name = "equal_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Assign_To_Loop_Variable_In_For_Of_Or_In_Loop, equal_token)},
      },
    },

    // Diag_Cannot_Access_Private_Identifier_Outside_Class
    {
      .variables = {
        {.name = "private_identifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Access_Private_Identifier_Outside_Class, private_identifier)},
      },
    },

    // Diag_Cannot_Assign_To_Variable_Named_Async_In_For_Of_Loop
    {
      .variables = {
        {.name = "async_identifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Assign_To_Variable_Named_Async_In_For_Of_Loop, async_identifier)},
      },
    },

    // Diag_Cannot_Declare_Await_In_Async_Function
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Declare_Await_In_Async_Function, name)},
      },
    },

    // Diag_Cannot_Declare_Class_Named_Let
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Declare_Class_Named_Let, name)},
      },
    },

    // Diag_Cannot_Declare_Variable_Named_Let_With_Let
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Declare_Variable_Named_Let_With_Let, name)},
      },
    },

    // Diag_Cannot_Declare_Variable_With_Keyword_Name
    {
      .variables = {
        {.name = "keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Declare_Variable_With_Keyword_Name, keyword)},
      },
    },

    // Diag_Cannot_Declare_Yield_In_Generator_Function
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Declare_Yield_In_Generator_Function, name)},
      },
    },

    // Diag_Cannot_Export_Default_Variable
    {
      .variables = {
        {.name = "declaring_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Export_Default_Variable, declaring_token)},
      },
    },

    // Diag_Cannot_Export_Let
    {
      .variables = {
        {.name = "export_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Export_Let, export_name)},
      },
    },

    // Diag_Cannot_Export_Variable_Named_Keyword
    {
      .variables = {
        {.name = "export_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Export_Variable_Named_Keyword, export_name)},
      },
    },

    // Diag_Cannot_Import_Let
    {
      .variables = {
        {.name = "import_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Import_Let, import_name)},
      },
    },

    // Diag_Cannot_Import_Variable_Named_Keyword
    {
      .variables = {
        {.name = "import_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Import_Variable_Named_Keyword, import_name)},
      },
    },

    // Diag_Cannot_Import_From_Unquoted_Module
    {
      .variables = {
        {.name = "import_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Import_From_Unquoted_Module, import_name)},
      },
    },

    // Diag_Cannot_Refer_To_Private_Variable_Without_Object
    {
      .variables = {
        {.name = "private_identifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Refer_To_Private_Variable_Without_Object, private_identifier)},
      },
    },

    // Diag_Cannot_Update_Variable_During_Declaration
    {
      .variables = {
        {.name = "declaring_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Update_Variable_During_Declaration, declaring_token)},
        {.name = "updating_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Cannot_Update_Variable_During_Declaration, updating_operator)},
      },
    },

    // Diag_Catch_Without_Try
    {
      .variables = {
        {.name = "catch_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Catch_Without_Try, catch_token)},
      },
    },

    // Diag_Class_Statement_Not_Allowed_In_Body
    {
      .variables = {
        {.name = "kind_of_statement", .type = Diagnostic_Arg_Type::statement_kind, .offset = offsetof(Diag_Class_Statement_Not_Allowed_In_Body, kind_of_statement)},
        {.name = "expected_body", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Class_Statement_Not_Allowed_In_Body, expected_body)},
        {.name = "class_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Class_Statement_Not_Allowed_In_Body, class_keyword)},
      },
    },

    // Diag_Character_Disallowed_In_Identifiers
    {
      .variables = {
        {.name = "character", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Character_Disallowed_In_Identifiers, character)},
      },
    },

    // Diag_Comma_Not_Allowed_After_Spread_Parameter
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Comma_Not_Allowed_After_Spread_Parameter, comma)},
        {.name = "spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Comma_Not_Allowed_After_Spread_Parameter, spread)},
      },
    },

    // Diag_Comma_Not_Allowed_Before_First_Generic_Parameter
    {
      .variables = {
        {.name = "unexpected_comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Comma_Not_Allowed_Before_First_Generic_Parameter, unexpected_comma)},
      },
    },

    // Diag_Comma_Not_Allowed_Between_Class_Methods
    {
      .variables = {
        {.name = "unexpected_comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Comma_Not_Allowed_Between_Class_Methods, unexpected_comma)},
      },
    },

    // Diag_Config_Json_Syntax_Error
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Json_Syntax_Error, where)},
      },
    },

    // Diag_Config_Global_Groups_Group_Type_Mismatch
    {
      .variables = {
        {.name = "group", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Global_Groups_Group_Type_Mismatch, group)},
      },
    },

    // Diag_Config_Global_Groups_Type_Mismatch
    {
      .variables = {
        {.name = "value", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Global_Groups_Type_Mismatch, value)},
      },
    },

    // Diag_Config_Globals_Descriptor_Type_Mismatch
    {
      .variables = {
        {.name = "descriptor", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Globals_Descriptor_Type_Mismatch, descriptor)},
      },
    },

    // Diag_Config_Globals_Descriptor_Shadowable_Type_Mismatch
    {
      .variables = {
        {.name = "value", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Globals_Descriptor_Shadowable_Type_Mismatch, value)},
      },
    },

    // Diag_Config_Globals_Descriptor_Writable_Type_Mismatch
    {
      .variables = {
        {.name = "value", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Globals_Descriptor_Writable_Type_Mismatch, value)},
      },
    },

    // Diag_Config_Globals_Type_Mismatch
    {
      .variables = {
        {.name = "value", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Config_Globals_Type_Mismatch, value)},
      },
    },

    // Diag_Depth_Limit_Exceeded
    {
      .variables = {
        {.name = "token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Depth_Limit_Exceeded, token)},
      },
    },

    // Diag_Dot_Not_Allowed_After_Generic_Arguments_In_Type
    {
      .variables = {
        {.name = "dot", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Dot_Not_Allowed_After_Generic_Arguments_In_Type, dot)},
        {.name = "property_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Dot_Not_Allowed_After_Generic_Arguments_In_Type, property_name)},
      },
    },

    // Diag_Dot_Dot_Is_Not_An_Operator
    {
      .variables = {
        {.name = "dots", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Dot_Dot_Is_Not_An_Operator, dots)},
      },
    },

    // Diag_Duplicated_Cases_In_Switch_Statement
    {
      .variables = {
        {.name = "first_switch_case", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Duplicated_Cases_In_Switch_Statement, first_switch_case)},
        {.name = "duplicated_switch_case", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Duplicated_Cases_In_Switch_Statement, duplicated_switch_case)},
      },
    },

    // Diag_Else_Has_No_If
    {
      .variables = {
        {.name = "else_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Else_Has_No_If, else_token)},
      },
    },

    // Diag_Equals_Does_Not_Distribute_Over_Or
    {
      .variables = {
        {.name = "or_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Equals_Does_Not_Distribute_Over_Or, or_operator)},
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Equals_Does_Not_Distribute_Over_Or, equals_operator)},
      },
    },

    // Diag_Escaped_Character_Disallowed_In_Identifiers
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Escaped_Character_Disallowed_In_Identifiers, escape_sequence)},
      },
    },

    // Diag_Escaped_Code_Point_In_Identifier_Out_Of_Range
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Escaped_Code_Point_In_Identifier_Out_Of_Range, escape_sequence)},
      },
    },

    // Diag_Escaped_Code_Point_In_Unicode_Out_Of_Range
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Escaped_Code_Point_In_Unicode_Out_Of_Range, escape_sequence)},
      },
    },

    // Diag_Escaped_Hyphen_Not_Allowed_In_JSX_Tag
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Escaped_Hyphen_Not_Allowed_In_JSX_Tag, escape_sequence)},
      },
    },

    // Diag_Extra_Comma_Not_Allowed_Between_Arguments
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Extra_Comma_Not_Allowed_Between_Arguments, comma)},
      },
    },

    // Diag_Extra_Comma_Not_Allowed_Between_Enum_Members
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Extra_Comma_Not_Allowed_Between_Enum_Members, comma)},
      },
    },

    // Diag_Misleading_Comma_Operator_In_Index_Operation
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Misleading_Comma_Operator_In_Index_Operation, comma)},
        {.name = "left_square", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Misleading_Comma_Operator_In_Index_Operation, left_square)},
      },
    },

    // Diag_Misleading_Comma_Operator_In_Conditional_Statement
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Misleading_Comma_Operator_In_Conditional_Statement, comma)},
      },
    },

    // Diag_Empty_Paren_After_Control_Statement
    {
      .variables = {
        {.name = "token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Empty_Paren_After_Control_Statement, token)},
        {.name = "expected_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Empty_Paren_After_Control_Statement, expected_expression)},
      },
    },

    // Diag_Expected_As_Before_Imported_Namespace_Alias
    {
      .variables = {
        {.name = "star_through_alias_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_As_Before_Imported_Namespace_Alias, star_through_alias_token)},
        {.name = "alias", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_As_Before_Imported_Namespace_Alias, alias)},
        {.name = "star_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_As_Before_Imported_Namespace_Alias, star_token)},
      },
    },

    // Diag_Expected_Comma_To_Separate_Object_Literal_Entries
    {
      .variables = {
        {.name = "unexpected_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Comma_To_Separate_Object_Literal_Entries, unexpected_token)},
      },
    },

    // Diag_Expected_Expression_Before_Newline
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Expression_Before_Newline, where)},
      },
    },

    // Diag_Expected_Expression_For_Switch_Case
    {
      .variables = {
        {.name = "case_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Expression_For_Switch_Case, case_token)},
      },
    },

    // Diag_Expected_Expression_Before_Semicolon
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Expression_Before_Semicolon, where)},
      },
    },

    // Diag_Expected_From_And_Module_Specifier
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_From_And_Module_Specifier, where)},
      },
    },

    // Diag_Expected_From_Before_Module_Specifier
    {
      .variables = {
        {.name = "module_specifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_From_Before_Module_Specifier, module_specifier)},
      },
    },

    // Diag_Expected_Hex_Digits_In_Unicode_Escape
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Hex_Digits_In_Unicode_Escape, escape_sequence)},
      },
    },

    // Diag_Expected_Left_Curly
    {
      .variables = {
        {.name = "expected_left_curly", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Left_Curly, expected_left_curly)},
      },
    },

    // Diag_Expected_Right_Paren_For_Function_Call
    {
      .variables = {
        {.name = "expected_right_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Right_Paren_For_Function_Call, expected_right_paren)},
        {.name = "left_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Right_Paren_For_Function_Call, left_paren)},
      },
    },

    // Diag_Expected_Parentheses_Around_Do_While_Condition
    {
      .variables = {
        {.name = "condition", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parentheses_Around_Do_While_Condition, condition)},
      },
    },

    // Diag_Expected_Parenthesis_Around_Do_While_Condition
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parenthesis_Around_Do_While_Condition, where)},
        {.name = "token", .type = Diagnostic_Arg_Type::char8, .offset = offsetof(Diag_Expected_Parenthesis_Around_Do_While_Condition, token)},
      },
    },

    // Diag_Expected_Parentheses_Around_If_Condition
    {
      .variables = {
        {.name = "condition", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parentheses_Around_If_Condition, condition)},
      },
    },

    // Diag_Expected_Parenthesis_Around_If_Condition
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parenthesis_Around_If_Condition, where)},
        {.name = "token", .type = Diagnostic_Arg_Type::char8, .offset = offsetof(Diag_Expected_Parenthesis_Around_If_Condition, token)},
      },
    },

    // Diag_Expected_Parentheses_Around_Switch_Condition
    {
      .variables = {
        {.name = "condition", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parentheses_Around_Switch_Condition, condition)},
      },
    },

    // Diag_Expected_Parenthesis_Around_Switch_Condition
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parenthesis_Around_Switch_Condition, where)},
        {.name = "token", .type = Diagnostic_Arg_Type::char8, .offset = offsetof(Diag_Expected_Parenthesis_Around_Switch_Condition, token)},
      },
    },

    // Diag_Expected_Parentheses_Around_While_Condition
    {
      .variables = {
        {.name = "condition", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parentheses_Around_While_Condition, condition)},
      },
    },

    // Diag_Expected_Parenthesis_Around_While_Condition
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parenthesis_Around_While_Condition, where)},
        {.name = "token", .type = Diagnostic_Arg_Type::char8, .offset = offsetof(Diag_Expected_Parenthesis_Around_While_Condition, token)},
      },
    },

    // Diag_Expected_Parentheses_Around_With_Expression
    {
      .variables = {
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parentheses_Around_With_Expression, expression)},
      },
    },

    // Diag_Expected_Parenthesis_Around_With_Expression
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Parenthesis_Around_With_Expression, where)},
        {.name = "token", .type = Diagnostic_Arg_Type::char8, .offset = offsetof(Diag_Expected_Parenthesis_Around_With_Expression, token)},
      },
    },

    // Diag_Expected_Variable_Name_For_Catch
    {
      .variables = {
        {.name = "unexpected_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Variable_Name_For_Catch, unexpected_token)},
      },
    },

    // Diag_Expected_Variable_Name_For_Import_As
    {
      .variables = {
        {.name = "unexpected_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Expected_Variable_Name_For_Import_As, unexpected_token)},
      },
    },

    // Diag_Exporting_Requires_Default
    {
      .variables = {
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Exporting_Requires_Default, expression)},
      },
    },

    // Diag_Exporting_Requires_Curlies
    {
      .variables = {
        {.name = "names", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Exporting_Requires_Curlies, names)},
      },
    },

    // Diag_Exporting_String_Name_Only_Allowed_For_Export_From
    {
      .variables = {
        {.name = "export_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Exporting_String_Name_Only_Allowed_For_Export_From, export_name)},
      },
    },

    // Diag_Finally_Without_Try
    {
      .variables = {
        {.name = "finally_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Finally_Without_Try, finally_token)},
      },
    },

    // Diag_Function_Statement_Not_Allowed_In_Body
    {
      .variables = {
        {.name = "kind_of_statement", .type = Diagnostic_Arg_Type::statement_kind, .offset = offsetof(Diag_Function_Statement_Not_Allowed_In_Body, kind_of_statement)},
        {.name = "expected_body", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Function_Statement_Not_Allowed_In_Body, expected_body)},
        {.name = "function_keywords", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Function_Statement_Not_Allowed_In_Body, function_keywords)},
      },
    },

    // Diag_Generator_Function_Star_Belongs_After_Keyword_Function
    {
      .variables = {
        {.name = "star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Generator_Function_Star_Belongs_After_Keyword_Function, star)},
      },
    },

    // Diag_Generator_Function_Star_Belongs_Before_Name
    {
      .variables = {
        {.name = "function_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Generator_Function_Star_Belongs_Before_Name, function_name)},
        {.name = "star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Generator_Function_Star_Belongs_Before_Name, star)},
      },
    },

    // Diag_Multiple_Commas_In_Generic_Parameter_List
    {
      .variables = {
        {.name = "unexpected_comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Multiple_Commas_In_Generic_Parameter_List, unexpected_comma)},
      },
    },

    // Diag_In_Disallowed_In_C_Style_For_Loop
    {
      .variables = {
        {.name = "in_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_In_Disallowed_In_C_Style_For_Loop, in_token)},
      },
    },

    // Diag_Indexing_Requires_Expression
    {
      .variables = {
        {.name = "squares", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Indexing_Requires_Expression, squares)},
      },
    },

    // Diag_Invalid_Expression_Left_Of_Assignment
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Expression_Left_Of_Assignment, where)},
      },
    },

    // Diag_Invalid_Hex_Escape_Sequence
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Hex_Escape_Sequence, escape_sequence)},
      },
    },

    // Diag_Invalid_Lone_Literal_In_Object_Literal
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Lone_Literal_In_Object_Literal, where)},
      },
    },

    // Diag_Invalid_Parameter
    {
      .variables = {
        {.name = "parameter", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Parameter, parameter)},
      },
    },

    // Diag_Invalid_Quotes_Around_String_Literal
    {
      .variables = {
        {.name = "opening_quote", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Quotes_Around_String_Literal, opening_quote)},
        {.name = "suggested_quote", .type = Diagnostic_Arg_Type::char8, .offset = offsetof(Diag_Invalid_Quotes_Around_String_Literal, suggested_quote)},
      },
    },

    // Diag_Invalid_Rhs_For_Dot_Operator
    {
      .variables = {
        {.name = "dot", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Rhs_For_Dot_Operator, dot)},
      },
    },

    // Diag_Invalid_Utf_8_Sequence
    {
      .variables = {
        {.name = "sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Utf_8_Sequence, sequence)},
      },
    },

    // Diag_JSX_Attribute_Has_Wrong_Capitalization
    {
      .variables = {
        {.name = "attribute_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_JSX_Attribute_Has_Wrong_Capitalization, attribute_name)},
        {.name = "expected_attribute_name", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_JSX_Attribute_Has_Wrong_Capitalization, expected_attribute_name)},
      },
    },

    // Diag_JSX_Attribute_Renamed_By_React
    {
      .variables = {
        {.name = "attribute_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_JSX_Attribute_Renamed_By_React, attribute_name)},
        {.name = "react_attribute_name", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_JSX_Attribute_Renamed_By_React, react_attribute_name)},
      },
    },

    // Diag_JSX_Event_Attribute_Should_Be_Camel_Case
    {
      .variables = {
        {.name = "attribute_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_JSX_Event_Attribute_Should_Be_Camel_Case, attribute_name)},
        {.name = "expected_attribute_name", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_JSX_Event_Attribute_Should_Be_Camel_Case, expected_attribute_name)},
      },
    },

    // Diag_JSX_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "jsx_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_JSX_Not_Allowed_In_JavaScript, jsx_start)},
      },
    },

    // Diag_JSX_Not_Allowed_In_TypeScript
    {
      .variables = {
        {.name = "jsx_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_JSX_Not_Allowed_In_TypeScript, jsx_start)},
      },
    },

    // Diag_Keywords_Cannot_Contain_Escape_Sequences
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Keywords_Cannot_Contain_Escape_Sequences, escape_sequence)},
      },
    },

    // Diag_Label_Named_Await_Not_Allowed_In_Async_Function
    {
      .variables = {
        {.name = "await", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Label_Named_Await_Not_Allowed_In_Async_Function, await)},
        {.name = "colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Label_Named_Await_Not_Allowed_In_Async_Function, colon)},
      },
    },

    // Diag_Legacy_Octal_Literal_May_Not_Be_Big_Int
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Legacy_Octal_Literal_May_Not_Be_Big_Int, characters)},
      },
    },

    // Diag_Legacy_Octal_Literal_May_Not_Contain_Underscores
    {
      .variables = {
        {.name = "underscores", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Legacy_Octal_Literal_May_Not_Contain_Underscores, underscores)},
      },
    },

    // Diag_Let_With_No_Bindings
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Let_With_No_Bindings, where)},
      },
    },

    // Diag_Lexical_Declaration_Not_Allowed_In_Body
    {
      .variables = {
        {.name = "kind_of_statement", .type = Diagnostic_Arg_Type::statement_kind, .offset = offsetof(Diag_Lexical_Declaration_Not_Allowed_In_Body, kind_of_statement)},
        {.name = "expected_body", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Lexical_Declaration_Not_Allowed_In_Body, expected_body)},
        {.name = "declaring_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Lexical_Declaration_Not_Allowed_In_Body, declaring_keyword)},
      },
    },

    // Diag_Functions_Or_Methods_Should_Not_Have_Arrow_Operator
    {
      .variables = {
        {.name = "arrow_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Functions_Or_Methods_Should_Not_Have_Arrow_Operator, arrow_operator)},
      },
    },

    // Diag_Methods_Should_Not_Use_Function_Keyword
    {
      .variables = {
        {.name = "function_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Methods_Should_Not_Use_Function_Keyword, function_token)},
      },
    },

    // Diag_Mismatched_JSX_Tags
    {
      .variables = {
        {.name = "opening_tag_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Mismatched_JSX_Tags, opening_tag_name)},
        {.name = "closing_tag_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Mismatched_JSX_Tags, closing_tag_name)},
        {.name = "opening_tag_name_pretty", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Mismatched_JSX_Tags, opening_tag_name_pretty)},
      },
    },

    // Diag_Missing_Array_Close
    {
      .variables = {
        {.name = "left_square", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Array_Close, left_square)},
        {.name = "expected_right_square", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Array_Close, expected_right_square)},
      },
    },

    // Diag_Missing_Arrow_Operator_In_Arrow_Function
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Arrow_Operator_In_Arrow_Function, where)},
      },
    },

    // Diag_Missing_Arrow_Function_Parameter_List
    {
      .variables = {
        {.name = "arrow", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Arrow_Function_Parameter_List, arrow)},
      },
    },

    // Diag_Missing_Body_For_Catch_Clause
    {
      .variables = {
        {.name = "catch_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_Catch_Clause, catch_token)},
      },
    },

    // Diag_Missing_Body_For_Class
    {
      .variables = {
        {.name = "class_keyword_and_name_and_heritage", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_Class, class_keyword_and_name_and_heritage)},
      },
    },

    // Diag_Missing_Body_For_Do_While_Statement
    {
      .variables = {
        {.name = "do_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_Do_While_Statement, do_token)},
      },
    },

    // Diag_Missing_Body_For_Finally_Clause
    {
      .variables = {
        {.name = "finally_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_Finally_Clause, finally_token)},
      },
    },

    // Diag_Missing_Body_For_For_Statement
    {
      .variables = {
        {.name = "for_and_header", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_For_Statement, for_and_header)},
      },
    },

    // Diag_Missing_Body_For_If_Statement
    {
      .variables = {
        {.name = "expected_body", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_If_Statement, expected_body)},
      },
    },

    // Diag_Missing_Body_For_Switch_Statement
    {
      .variables = {
        {.name = "switch_and_condition", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_Switch_Statement, switch_and_condition)},
      },
    },

    // Diag_Missing_Body_For_Try_Statement
    {
      .variables = {
        {.name = "try_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_Try_Statement, try_token)},
      },
    },

    // Diag_Missing_Body_For_TypeScript_Interface
    {
      .variables = {
        {.name = "interface_keyword_and_name_and_heritage", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_TypeScript_Interface, interface_keyword_and_name_and_heritage)},
      },
    },

    // Diag_Missing_Body_For_TypeScript_Namespace
    {
      .variables = {
        {.name = "expected_body", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_TypeScript_Namespace, expected_body)},
      },
    },

    // Diag_Missing_Body_For_While_Statement
    {
      .variables = {
        {.name = "while_and_condition", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Body_For_While_Statement, while_and_condition)},
      },
    },

    // Diag_Missing_Catch_Or_Finally_For_Try_Statement
    {
      .variables = {
        {.name = "expected_catch_or_finally", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Catch_Or_Finally_For_Try_Statement, expected_catch_or_finally)},
        {.name = "try_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Catch_Or_Finally_For_Try_Statement, try_token)},
      },
    },

    // Diag_Missing_Catch_Variable_Between_Parentheses
    {
      .variables = {
        {.name = "left_paren_to_right_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Catch_Variable_Between_Parentheses, left_paren_to_right_paren)},
        {.name = "left_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Catch_Variable_Between_Parentheses, left_paren)},
        {.name = "right_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Catch_Variable_Between_Parentheses, right_paren)},
      },
    },

    // Diag_Missing_Comma_Between_Object_Literal_Entries
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Comma_Between_Object_Literal_Entries, where)},
      },
    },

    // Diag_Missing_Comma_Between_Generic_Parameters
    {
      .variables = {
        {.name = "expected_comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Comma_Between_Generic_Parameters, expected_comma)},
      },
    },

    // Diag_Missing_Comma_Between_Variable_Declarations
    {
      .variables = {
        {.name = "expected_comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Comma_Between_Variable_Declarations, expected_comma)},
      },
    },

    // Diag_Missing_Colon_In_Conditional_Expression
    {
      .variables = {
        {.name = "expected_colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Colon_In_Conditional_Expression, expected_colon)},
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Colon_In_Conditional_Expression, question)},
      },
    },

    // Diag_Missing_Condition_For_If_Statement
    {
      .variables = {
        {.name = "if_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Condition_For_If_Statement, if_keyword)},
      },
    },

    // Diag_Missing_Condition_For_While_Statement
    {
      .variables = {
        {.name = "while_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Condition_For_While_Statement, while_keyword)},
      },
    },

    // Diag_Missing_Condition_For_Switch_Statement
    {
      .variables = {
        {.name = "switch_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Condition_For_Switch_Statement, switch_keyword)},
      },
    },

    // Diag_Missing_Dots_For_Attribute_Spread
    {
      .variables = {
        {.name = "expected_dots", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Dots_For_Attribute_Spread, expected_dots)},
      },
    },

    // Diag_Missing_Equal_After_Variable
    {
      .variables = {
        {.name = "expected_equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Equal_After_Variable, expected_equal)},
      },
    },

    // Diag_Missing_Expression_Between_Parentheses
    {
      .variables = {
        {.name = "left_paren_to_right_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Expression_Between_Parentheses, left_paren_to_right_paren)},
        {.name = "left_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Expression_Between_Parentheses, left_paren)},
        {.name = "right_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Expression_Between_Parentheses, right_paren)},
      },
    },

    // Diag_Missing_For_Loop_Header
    {
      .variables = {
        {.name = "for_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_For_Loop_Header, for_token)},
      },
    },

    // Diag_Missing_For_Loop_Rhs_Or_Components_After_Expression
    {
      .variables = {
        {.name = "header", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_For_Loop_Rhs_Or_Components_After_Expression, header)},
        {.name = "for_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_For_Loop_Rhs_Or_Components_After_Expression, for_token)},
      },
    },

    // Diag_Missing_For_Loop_Rhs_Or_Components_After_Declaration
    {
      .variables = {
        {.name = "header", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_For_Loop_Rhs_Or_Components_After_Declaration, header)},
        {.name = "for_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_For_Loop_Rhs_Or_Components_After_Declaration, for_token)},
      },
    },

    // Diag_Missing_Function_Parameter_List
    {
      .variables = {
        {.name = "expected_parameter_list", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Function_Parameter_List, expected_parameter_list)},
      },
    },

    // Diag_Missing_Function_Body
    {
      .variables = {
        {.name = "expected_body", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Function_Body, expected_body)},
      },
    },

    // Diag_Missing_Header_Of_For_Loop
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Header_Of_For_Loop, where)},
      },
    },

    // Diag_Missing_Initializer_In_Const_Declaration
    {
      .variables = {
        {.name = "variable_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Initializer_In_Const_Declaration, variable_name)},
      },
    },

    // Diag_Missing_Key_For_Object_Entry
    {
      .variables = {
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Key_For_Object_Entry, expression)},
      },
    },

    // Diag_Missing_Class_Method_Name
    {
      .variables = {
        {.name = "expected_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Class_Method_Name, expected_name)},
      },
    },

    // Diag_Missing_Name_In_Function_Statement
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Name_In_Function_Statement, where)},
      },
    },

    // Diag_Missing_Name_In_Class_Statement
    {
      .variables = {
        {.name = "class_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Name_In_Class_Statement, class_keyword)},
      },
    },

    // Diag_Missing_Name_Of_Exported_Class
    {
      .variables = {
        {.name = "class_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Name_Of_Exported_Class, class_keyword)},
      },
    },

    // Diag_Missing_Name_Of_Exported_Function
    {
      .variables = {
        {.name = "function_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Name_Of_Exported_Function, function_keyword)},
      },
    },

    // Diag_Missing_Name_Or_Parentheses_For_Function
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Name_Or_Parentheses_For_Function, where)},
        {.name = "function", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Name_Or_Parentheses_For_Function, function)},
      },
    },

    // Diag_Missing_Operand_For_Operator
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Operand_For_Operator, where)},
      },
    },

    // Diag_Missing_Separator_Between_Object_Type_Entries
    {
      .variables = {
        {.name = "expected_separator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Separator_Between_Object_Type_Entries, expected_separator)},
      },
    },

    // Diag_Redundant_Delete_Statement_On_Variable
    {
      .variables = {
        {.name = "delete_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Redundant_Delete_Statement_On_Variable, delete_expression)},
      },
    },

    // Diag_Missing_If_After_Else
    {
      .variables = {
        {.name = "expected_if", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_If_After_Else, expected_if)},
      },
    },

    // Diag_Missing_Operator_Between_Expression_And_Arrow_Function
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Operator_Between_Expression_And_Arrow_Function, where)},
      },
    },

    // Diag_Missing_Parentheses_Around_Exponent_With_Unary_Lhs
    {
      .variables = {
        {.name = "exponent_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Parentheses_Around_Exponent_With_Unary_Lhs, exponent_expression)},
        {.name = "unary_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Parentheses_Around_Exponent_With_Unary_Lhs, unary_operator)},
      },
    },

    // Diag_Missing_Parentheses_Around_Self_Invoked_Function
    {
      .variables = {
        {.name = "invocation", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Parentheses_Around_Self_Invoked_Function, invocation)},
        {.name = "func_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Parentheses_Around_Self_Invoked_Function, func_start)},
      },
    },

    // Diag_Missing_Parentheses_Around_Unary_Lhs_Of_Exponent
    {
      .variables = {
        {.name = "unary_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Parentheses_Around_Unary_Lhs_Of_Exponent, unary_expression)},
        {.name = "exponent_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Parentheses_Around_Unary_Lhs_Of_Exponent, exponent_operator)},
      },
    },

    // Diag_Missing_Property_Name_For_Dot_Operator
    {
      .variables = {
        {.name = "dot", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Property_Name_For_Dot_Operator, dot)},
      },
    },

    // Diag_Missing_Semicolon_After_Abstract_Method
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_After_Abstract_Method, expected_semicolon)},
      },
    },

    // Diag_Missing_Semicolon_After_Declare_Class_Method
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_After_Declare_Class_Method, expected_semicolon)},
      },
    },

    // Diag_Missing_Semicolon_After_Statement
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_After_Statement, where)},
      },
    },

    // Diag_Missing_Semicolon_After_Field
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_After_Field, expected_semicolon)},
      },
    },

    // Diag_Missing_Semicolon_After_Index_Signature
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_After_Index_Signature, expected_semicolon)},
      },
    },

    // Diag_Missing_Semicolon_After_Interface_Method
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_After_Interface_Method, expected_semicolon)},
      },
    },

    // Diag_Missing_Semicolon_Between_For_Loop_Condition_And_Update
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_Between_For_Loop_Condition_And_Update, expected_semicolon)},
      },
    },

    // Diag_Missing_Semicolon_Between_For_Loop_Init_And_Condition
    {
      .variables = {
        {.name = "expected_semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Semicolon_Between_For_Loop_Init_And_Condition, expected_semicolon)},
      },
    },

    // Diag_Missing_Token_After_Export
    {
      .variables = {
        {.name = "export_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Token_After_Export, export_token)},
      },
    },

    // Diag_Missing_Type_Between_Intersection_Or_Union
    {
      .variables = {
        {.name = "left_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Type_Between_Intersection_Or_Union, left_operator)},
        {.name = "right_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Type_Between_Intersection_Or_Union, right_operator)},
      },
    },

    // Diag_Missing_TypeScript_Type
    {
      .variables = {
        {.name = "expected_type", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_TypeScript_Type, expected_type)},
      },
    },

    // Diag_Missing_Value_For_Object_Literal_Entry
    {
      .variables = {
        {.name = "key", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Value_For_Object_Literal_Entry, key)},
      },
    },

    // Diag_Missing_Variable_Name_In_Declaration
    {
      .variables = {
        {.name = "equal_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_Variable_Name_In_Declaration, equal_token)},
      },
    },

    // Diag_Missing_While_And_Condition_For_Do_While_Statement
    {
      .variables = {
        {.name = "do_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_While_And_Condition_For_Do_While_Statement, do_token)},
        {.name = "expected_while", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Missing_While_And_Condition_For_Do_While_Statement, expected_while)},
      },
    },

    // Diag_Newline_Not_Allowed_Between_Async_And_Parameter_List
    {
      .variables = {
        {.name = "async", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_Between_Async_And_Parameter_List, async)},
        {.name = "arrow", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_Between_Async_And_Parameter_List, arrow)},
      },
    },

    // Diag_Newline_Not_Allowed_Between_Async_And_Function_Keyword
    {
      .variables = {
        {.name = "async_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_Between_Async_And_Function_Keyword, async_keyword)},
        {.name = "function_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_Between_Async_And_Function_Keyword, function_keyword)},
      },
    },

    // Diag_Newline_Not_Allowed_After_Abstract_Keyword
    {
      .variables = {
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_After_Abstract_Keyword, abstract_keyword)},
      },
    },

    // Diag_Newline_Not_Allowed_After_Export_Declare
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_After_Export_Declare, declare_keyword)},
        {.name = "export_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_After_Export_Declare, export_keyword)},
      },
    },

    // Diag_Newline_Not_Allowed_After_Interface_Keyword
    {
      .variables = {
        {.name = "interface_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_After_Interface_Keyword, interface_keyword)},
      },
    },

    // Diag_Newline_Not_Allowed_After_Namespace_Keyword
    {
      .variables = {
        {.name = "namespace_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_After_Namespace_Keyword, namespace_keyword)},
      },
    },

    // Diag_Newline_Not_Allowed_After_Type_Keyword
    {
      .variables = {
        {.name = "type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_After_Type_Keyword, type_keyword)},
      },
    },

    // Diag_Newline_Not_Allowed_Before_Assignment_Assertion_Operator
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_Before_Assignment_Assertion_Operator, bang)},
        {.name = "field_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Newline_Not_Allowed_Before_Assignment_Assertion_Operator, field_name)},
      },
    },

    // Diag_Number_Literal_Contains_Consecutive_Underscores
    {
      .variables = {
        {.name = "underscores", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Number_Literal_Contains_Consecutive_Underscores, underscores)},
      },
    },

    // Diag_Number_Literal_Contains_Trailing_Underscores
    {
      .variables = {
        {.name = "underscores", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Number_Literal_Contains_Trailing_Underscores, underscores)},
      },
    },

    // Diag_Octal_Literal_May_Not_Have_Exponent
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Octal_Literal_May_Not_Have_Exponent, characters)},
      },
    },

    // Diag_Octal_Literal_May_Not_Have_Decimal
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Octal_Literal_May_Not_Have_Decimal, characters)},
      },
    },

    // Diag_Object_Literal_Default_In_Expression
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Object_Literal_Default_In_Expression, equal)},
      },
    },

    // Diag_Optional_Arrow_Parameter_Requires_Parentheses
    {
      .variables = {
        {.name = "parameter_and_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Arrow_Parameter_Requires_Parentheses, parameter_and_question)},
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Arrow_Parameter_Requires_Parentheses, question)},
      },
    },

    // Diag_Optional_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses
    {
      .variables = {
        {.name = "parameter_and_annotation", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses, parameter_and_annotation)},
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses, question)},
        {.name = "type_colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Arrow_Parameter_With_Type_Annotation_Requires_Parentheses, type_colon)},
      },
    },

    // Diag_Optional_Parameter_Cannot_Have_Initializer
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Parameter_Cannot_Have_Initializer, equal)},
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Parameter_Cannot_Have_Initializer, question)},
      },
    },

    // Diag_Optional_Parameter_Cannot_Be_Followed_By_Required_Parameter
    {
      .variables = {
        {.name = "optional_parameter", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Parameter_Cannot_Be_Followed_By_Required_Parameter, optional_parameter)},
        {.name = "required_parameter", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Optional_Parameter_Cannot_Be_Followed_By_Required_Parameter, required_parameter)},
      },
    },

    // Diag_Integer_Literal_Will_Lose_Precision
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Integer_Literal_Will_Lose_Precision, characters)},
        {.name = "rounded_val", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Integer_Literal_Will_Lose_Precision, rounded_val)},
      },
    },

    // Diag_Private_Properties_Are_Not_Allowed_In_Object_Literals
    {
      .variables = {
        {.name = "private_identifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Private_Properties_Are_Not_Allowed_In_Object_Literals, private_identifier)},
      },
    },

    // Diag_Readonly_Static_Field
    {
      .variables = {
        {.name = "readonly_static", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Readonly_Static_Field, readonly_static)},
      },
    },

    // Diag_Redeclaration_Of_Global_Variable
    {
      .variables = {
        {.name = "redeclaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Redeclaration_Of_Global_Variable, redeclaration)},
      },
    },

    // Diag_Redeclaration_Of_Variable
    {
      .variables = {
        {.name = "redeclaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Redeclaration_Of_Variable, redeclaration)},
        {.name = "original_declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Redeclaration_Of_Variable, original_declaration)},
      },
    },

    // Diag_Redundant_Await
    {
      .variables = {
        {.name = "await_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Redundant_Await, await_operator)},
      },
    },

    // Diag_Regexp_Literal_Flags_Cannot_Contain_Unicode_Escapes
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Regexp_Literal_Flags_Cannot_Contain_Unicode_Escapes, escape_sequence)},
      },
    },

    // Diag_Return_Statement_Returns_Nothing
    {
      .variables = {
        {.name = "return_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Return_Statement_Returns_Nothing, return_keyword)},
      },
    },

    // Diag_Spread_Parameter_Cannot_Be_This
    {
      .variables = {
        {.name = "this_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Spread_Parameter_Cannot_Be_This, this_keyword)},
        {.name = "spread_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Spread_Parameter_Cannot_Be_This, spread_operator)},
      },
    },

    // Diag_Statement_Before_First_Switch_Case
    {
      .variables = {
        {.name = "unexpected_statement", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Statement_Before_First_Switch_Case, unexpected_statement)},
      },
    },

    // Diag_Stray_Comma_In_Let_Statement
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Stray_Comma_In_Let_Statement, where)},
      },
    },

    // Diag_Stray_Comma_In_Parameter
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Stray_Comma_In_Parameter, comma)},
      },
    },

    // Diag_String_Namespace_Name_Is_Only_Allowed_With_Declare_Module
    {
      .variables = {
        {.name = "module_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_String_Namespace_Name_Is_Only_Allowed_With_Declare_Module, module_name)},
      },
    },

    // Diag_String_Namespace_Name_Is_Only_Allowed_At_Top_Level
    {
      .variables = {
        {.name = "module_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_String_Namespace_Name_Is_Only_Allowed_At_Top_Level, module_name)},
      },
    },

    // Diag_This_Parameter_Must_Be_First
    {
      .variables = {
        {.name = "this_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_This_Parameter_Must_Be_First, this_keyword)},
        {.name = "first_parameter_begin", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_This_Parameter_Must_Be_First, first_parameter_begin)},
      },
    },

    // Diag_This_Parameter_Not_Allowed_In_Arrow_Functions
    {
      .variables = {
        {.name = "this_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_This_Parameter_Not_Allowed_In_Arrow_Functions, this_keyword)},
      },
    },

    // Diag_This_Parameter_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "this_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_This_Parameter_Not_Allowed_In_JavaScript, this_keyword)},
      },
    },

    // Diag_This_Parameter_Not_Allowed_When_Destructuring
    {
      .variables = {
        {.name = "this_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_This_Parameter_Not_Allowed_When_Destructuring, this_keyword)},
      },
    },

    // Diag_TypeScript_Abstract_Class_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "abstract_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Abstract_Class_Not_Allowed_In_JavaScript, abstract_keyword)},
      },
    },

    // Diag_TypeScript_Angle_Type_Assertion_Not_Allowed_In_Tsx
    {
      .variables = {
        {.name = "bracketed_type", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Angle_Type_Assertion_Not_Allowed_In_Tsx, bracketed_type)},
        {.name = "expected_as", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Angle_Type_Assertion_Not_Allowed_In_Tsx, expected_as)},
      },
    },

    // Diag_TypeScript_As_Const_With_Non_Literal_Typeable
    {
      .variables = {
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_As_Const_With_Non_Literal_Typeable, expression)},
        {.name = "as_const", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_As_Const_With_Non_Literal_Typeable, as_const)},
      },
    },

    // Diag_TypeScript_As_Type_Assertion_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "as_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_As_Type_Assertion_Not_Allowed_In_JavaScript, as_keyword)},
      },
    },

    // Diag_TypeScript_As_Or_Satisfies_Used_For_Parameter_Type_Annotation
    {
      .variables = {
        {.name = "bad_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_As_Or_Satisfies_Used_For_Parameter_Type_Annotation, bad_keyword)},
      },
    },

    // Diag_TypeScript_Assignment_Asserted_Fields_Not_Allowed_In_Declare_Class
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Fields_Not_Allowed_In_Declare_Class, bang)},
      },
    },

    // Diag_TypeScript_Assignment_Asserted_Fields_Not_Allowed_In_Interfaces
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Fields_Not_Allowed_In_Interfaces, bang)},
      },
    },

    // Diag_TypeScript_Assignment_Asserted_Fields_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Fields_Not_Allowed_In_JavaScript, bang)},
      },
    },

    // Diag_TypeScript_Assignment_Asserted_Field_Cannot_Have_Initializer
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Field_Cannot_Have_Initializer, equal)},
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Field_Cannot_Have_Initializer, bang)},
      },
    },

    // Diag_TypeScript_Assignment_Asserted_Field_Must_Have_A_Type
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Field_Must_Have_A_Type, bang)},
      },
    },

    // Diag_TypeScript_Assignment_Asserted_Method
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Assignment_Asserted_Method, bang)},
      },
    },

    // Diag_TypeScript_Catch_Type_Annotation_Must_Be_Any
    {
      .variables = {
        {.name = "type_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Catch_Type_Annotation_Must_Be_Any, type_expression)},
      },
    },

    // Diag_TypeScript_Class_Implements_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "implements_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Class_Implements_Not_Allowed_In_JavaScript, implements_keyword)},
      },
    },

    // Diag_TypeScript_Delete_Cannot_Delete_Variables
    {
      .variables = {
        {.name = "delete_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Delete_Cannot_Delete_Variables, delete_expression)},
      },
    },

    // Diag_TypeScript_Enum_Auto_Member_Needs_Initializer_After_Computed
    {
      .variables = {
        {.name = "auto_member_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Enum_Auto_Member_Needs_Initializer_After_Computed, auto_member_name)},
        {.name = "computed_expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Enum_Auto_Member_Needs_Initializer_After_Computed, computed_expression)},
      },
    },

    // Diag_TypeScript_Enum_Computed_Name_Must_Be_Simple
    {
      .variables = {
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Enum_Computed_Name_Must_Be_Simple, expression)},
      },
    },

    // Diag_TypeScript_Enum_Is_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "enum_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Enum_Is_Not_Allowed_In_JavaScript, enum_keyword)},
      },
    },

    // Diag_TypeScript_Enum_Member_Name_Cannot_Be_Number
    {
      .variables = {
        {.name = "number", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Enum_Member_Name_Cannot_Be_Number, number)},
      },
    },

    // Diag_TypeScript_Enum_Value_Must_Be_Constant
    {
      .variables = {
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Enum_Value_Must_Be_Constant, expression)},
        {.name = "declared_enum_kind", .type = Diagnostic_Arg_Type::enum_kind, .offset = offsetof(Diag_TypeScript_Enum_Value_Must_Be_Constant, declared_enum_kind)},
      },
    },

    // Diag_TypeScript_Export_Equal_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Export_Equal_Not_Allowed_In_JavaScript, equal)},
        {.name = "export_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Export_Equal_Not_Allowed_In_JavaScript, export_keyword)},
      },
    },

    // Diag_TypeScript_Implements_Must_Be_After_Extends
    {
      .variables = {
        {.name = "implements_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Implements_Must_Be_After_Extends, implements_keyword)},
        {.name = "extends_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Implements_Must_Be_After_Extends, extends_keyword)},
      },
    },

    // Diag_TypeScript_Import_Alias_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "import_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Import_Alias_Not_Allowed_In_JavaScript, import_keyword)},
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Import_Alias_Not_Allowed_In_JavaScript, equal)},
      },
    },

    // Diag_TypeScript_Index_Signature_Cannot_Be_Method
    {
      .variables = {
        {.name = "left_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Index_Signature_Cannot_Be_Method, left_paren)},
      },
    },

    // Diag_TypeScript_Index_Signature_Needs_Type
    {
      .variables = {
        {.name = "expected_type", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Index_Signature_Needs_Type, expected_type)},
      },
    },

    // Diag_TypeScript_Infer_Outside_Conditional_Type
    {
      .variables = {
        {.name = "infer_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Infer_Outside_Conditional_Type, infer_keyword)},
      },
    },

    // Diag_TypeScript_Infer_Requires_Parentheses
    {
      .variables = {
        {.name = "infer_and_type", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Infer_Requires_Parentheses, infer_and_type)},
        {.name = "type", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Infer_Requires_Parentheses, type)},
      },
    },

    // Diag_TypeScript_Function_Overload_Signature_Must_Have_Same_Name
    {
      .variables = {
        {.name = "overload_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Function_Overload_Signature_Must_Have_Same_Name, overload_name)},
        {.name = "function_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Function_Overload_Signature_Must_Have_Same_Name, function_name)},
      },
    },

    // Diag_TypeScript_Function_Overload_Signature_Must_Not_Have_Generator_Star
    {
      .variables = {
        {.name = "generator_star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Function_Overload_Signature_Must_Not_Have_Generator_Star, generator_star)},
      },
    },

    // Diag_TypeScript_Generic_Arrow_Needs_Comma_In_JSX_Mode
    {
      .variables = {
        {.name = "generic_parameters_less", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Generic_Arrow_Needs_Comma_In_JSX_Mode, generic_parameters_less)},
        {.name = "expected_comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Generic_Arrow_Needs_Comma_In_JSX_Mode, expected_comma)},
        {.name = "arrow", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Generic_Arrow_Needs_Comma_In_JSX_Mode, arrow)},
      },
    },

    // Diag_TypeScript_Generic_Parameter_List_Is_Empty
    {
      .variables = {
        {.name = "expected_parameter", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Generic_Parameter_List_Is_Empty, expected_parameter)},
      },
    },

    // Diag_TypeScript_Generics_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "opening_less", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Generics_Not_Allowed_In_JavaScript, opening_less)},
      },
    },

    // Diag_TypeScript_Type_Export_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Type_Export_Not_Allowed_In_JavaScript, type_keyword)},
      },
    },

    // Diag_TypeScript_Inline_Type_Export_Not_Allowed_In_Type_Only_Export
    {
      .variables = {
        {.name = "inline_type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Inline_Type_Export_Not_Allowed_In_Type_Only_Export, inline_type_keyword)},
        {.name = "type_only_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Inline_Type_Export_Not_Allowed_In_Type_Only_Export, type_only_keyword)},
      },
    },

    // Diag_TypeScript_Inline_Type_Import_Not_Allowed_In_Type_Only_Import
    {
      .variables = {
        {.name = "inline_type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Inline_Type_Import_Not_Allowed_In_Type_Only_Import, inline_type_keyword)},
        {.name = "type_only_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Inline_Type_Import_Not_Allowed_In_Type_Only_Import, type_only_keyword)},
      },
    },

    // Diag_TypeScript_Interfaces_Cannot_Contain_Static_Blocks
    {
      .variables = {
        {.name = "static_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Interfaces_Cannot_Contain_Static_Blocks, static_token)},
      },
    },

    // Diag_TypeScript_Declare_Class_Cannot_Contain_Static_Block_Statement
    {
      .variables = {
        {.name = "static_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Declare_Class_Cannot_Contain_Static_Block_Statement, static_token)},
      },
    },

    // Diag_TypeScript_Interfaces_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "interface_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Interfaces_Not_Allowed_In_JavaScript, interface_keyword)},
      },
    },

    // Diag_TypeScript_Missing_Name_And_Colon_In_Named_Tuple_Type
    {
      .variables = {
        {.name = "expected_name_and_colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Missing_Name_And_Colon_In_Named_Tuple_Type, expected_name_and_colon)},
        {.name = "existing_name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Missing_Name_And_Colon_In_Named_Tuple_Type, existing_name)},
      },
    },

    // Diag_TypeScript_Missing_Name_In_Named_Tuple_Type
    {
      .variables = {
        {.name = "colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Missing_Name_In_Named_Tuple_Type, colon)},
      },
    },

    // Diag_TypeScript_Named_Tuple_Element_Question_After_Name_And_Type
    {
      .variables = {
        {.name = "type_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Question_After_Name_And_Type, type_question)},
        {.name = "name_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Question_After_Name_And_Type, name_question)},
      },
    },

    // Diag_TypeScript_Named_Tuple_Element_Question_After_Type
    {
      .variables = {
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Question_After_Type, question)},
        {.name = "expected_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Question_After_Type, expected_question)},
      },
    },

    // Diag_TypeScript_Named_Tuple_Element_Spread_Before_Name_And_Type
    {
      .variables = {
        {.name = "type_spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Spread_Before_Name_And_Type, type_spread)},
        {.name = "name_spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Spread_Before_Name_And_Type, name_spread)},
      },
    },

    // Diag_TypeScript_Named_Tuple_Element_Spread_Before_Type
    {
      .variables = {
        {.name = "spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Spread_Before_Type, spread)},
        {.name = "expected_spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Named_Tuple_Element_Spread_Before_Type, expected_spread)},
      },
    },

    // Diag_TypeScript_Namespace_Cannot_Export_Default
    {
      .variables = {
        {.name = "default_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Namespace_Cannot_Export_Default, default_keyword)},
        {.name = "namespace_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Namespace_Cannot_Export_Default, namespace_keyword)},
      },
    },

    // Diag_TypeScript_Namespaces_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "namespace_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Namespaces_Not_Allowed_In_JavaScript, namespace_keyword)},
      },
    },

    // Diag_TypeScript_Non_Null_Assertion_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Non_Null_Assertion_Not_Allowed_In_JavaScript, bang)},
      },
    },

    // Diag_TypeScript_Optional_Parameters_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Optional_Parameters_Not_Allowed_In_JavaScript, question)},
      },
    },

    // Diag_TypeScript_Optional_Properties_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Optional_Properties_Not_Allowed_In_JavaScript, question)},
      },
    },

    // Diag_TypeScript_Optional_Tuple_Element_Cannot_Follow_Spread_Element
    {
      .variables = {
        {.name = "optional_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Optional_Tuple_Element_Cannot_Follow_Spread_Element, optional_question)},
        {.name = "previous_spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Optional_Tuple_Element_Cannot_Follow_Spread_Element, previous_spread)},
      },
    },

    // Diag_TypeScript_Parameter_Property_Cannot_Be_Destructured
    {
      .variables = {
        {.name = "destructure_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Cannot_Be_Destructured, destructure_token)},
        {.name = "property_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Cannot_Be_Destructured, property_keyword)},
      },
    },

    // Diag_TypeScript_Parameter_Property_Cannot_Be_Rest
    {
      .variables = {
        {.name = "spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Cannot_Be_Rest, spread)},
        {.name = "property_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Cannot_Be_Rest, property_keyword)},
      },
    },

    // Diag_TypeScript_Parameter_Property_Not_Allowed_In_Declare_Class
    {
      .variables = {
        {.name = "property_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Not_Allowed_In_Declare_Class, property_keyword)},
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Not_Allowed_In_Declare_Class, declare_keyword)},
      },
    },

    // Diag_TypeScript_Parameter_Property_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "property_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Not_Allowed_In_JavaScript, property_keyword)},
      },
    },

    // Diag_TypeScript_Parameter_Property_Only_Allowed_In_Class_Constructor
    {
      .variables = {
        {.name = "property_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Parameter_Property_Only_Allowed_In_Class_Constructor, property_keyword)},
      },
    },

    // Diag_TypeScript_Private_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "specifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Private_Not_Allowed_In_JavaScript, specifier)},
      },
    },

    // Diag_TypeScript_Protected_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "specifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Protected_Not_Allowed_In_JavaScript, specifier)},
      },
    },

    // Diag_TypeScript_Public_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "specifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Public_Not_Allowed_In_JavaScript, specifier)},
      },
    },

    // Diag_TypeScript_Readonly_Fields_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "readonly_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Readonly_Fields_Not_Allowed_In_JavaScript, readonly_keyword)},
      },
    },

    // Diag_TypeScript_Readonly_Method
    {
      .variables = {
        {.name = "readonly_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Readonly_Method, readonly_keyword)},
      },
    },

    // Diag_TypeScript_Readonly_In_Type_Needs_Array_Or_Tuple_Type
    {
      .variables = {
        {.name = "readonly_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Readonly_In_Type_Needs_Array_Or_Tuple_Type, readonly_keyword)},
      },
    },

    // Diag_TypeScript_Required_Tuple_Element_After_Optional_Element
    {
      .variables = {
        {.name = "expected_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Required_Tuple_Element_After_Optional_Element, expected_question)},
        {.name = "previous_optional_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Required_Tuple_Element_After_Optional_Element, previous_optional_question)},
      },
    },

    // Diag_TypeScript_Requires_Space_Between_Greater_And_Equal
    {
      .variables = {
        {.name = "greater_equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Requires_Space_Between_Greater_And_Equal, greater_equal)},
      },
    },

    // Diag_TypeScript_Satisfies_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "satisfies_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Satisfies_Not_Allowed_In_JavaScript, satisfies_keyword)},
      },
    },

    // Diag_TypeScript_Type_Annotation_In_Expression
    {
      .variables = {
        {.name = "type_colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Type_Annotation_In_Expression, type_colon)},
      },
    },

    // Diag_TypeScript_Type_Annotations_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "type_colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Type_Annotations_Not_Allowed_In_JavaScript, type_colon)},
      },
    },

    // Diag_TypeScript_Type_Alias_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Type_Alias_Not_Allowed_In_JavaScript, type_keyword)},
      },
    },

    // Diag_TypeScript_Type_Only_Import_Cannot_Import_Default_And_Named
    {
      .variables = {
        {.name = "type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Type_Only_Import_Cannot_Import_Default_And_Named, type_keyword)},
      },
    },

    // Diag_TypeScript_Type_Import_Not_Allowed_In_JavaScript
    {
      .variables = {
        {.name = "type_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Type_Import_Not_Allowed_In_JavaScript, type_keyword)},
      },
    },

    // Diag_TypeScript_Spread_Element_Cannot_Be_Optional
    {
      .variables = {
        {.name = "optional_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Spread_Element_Cannot_Be_Optional, optional_question)},
        {.name = "spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Spread_Element_Cannot_Be_Optional, spread)},
      },
    },

    // Diag_TypeScript_Style_Const_Field
    {
      .variables = {
        {.name = "const_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Style_Const_Field, const_token)},
      },
    },

    // Diag_TypeScript_Variance_Keywords_In_Wrong_Order
    {
      .variables = {
        {.name = "in_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Variance_Keywords_In_Wrong_Order, in_keyword)},
        {.name = "out_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_TypeScript_Variance_Keywords_In_Wrong_Order, out_keyword)},
      },
    },

    // Diag_Unclosed_Block_Comment
    {
      .variables = {
        {.name = "comment_open", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Block_Comment, comment_open)},
      },
    },

    // Diag_Unclosed_Class_Block
    {
      .variables = {
        {.name = "block_open", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Class_Block, block_open)},
      },
    },

    // Diag_Unclosed_Code_Block
    {
      .variables = {
        {.name = "block_open", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Code_Block, block_open)},
      },
    },

    // Diag_Unclosed_Interface_Block
    {
      .variables = {
        {.name = "block_open", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Interface_Block, block_open)},
      },
    },

    // Diag_Unclosed_Identifier_Escape_Sequence
    {
      .variables = {
        {.name = "escape_sequence", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Identifier_Escape_Sequence, escape_sequence)},
      },
    },

    // Diag_Unclosed_Object_Literal
    {
      .variables = {
        {.name = "object_open", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Object_Literal, object_open)},
        {.name = "expected_object_close", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Object_Literal, expected_object_close)},
      },
    },

    // Diag_Unclosed_Regexp_Literal
    {
      .variables = {
        {.name = "regexp_literal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Regexp_Literal, regexp_literal)},
      },
    },

    // Diag_Unclosed_String_Literal
    {
      .variables = {
        {.name = "string_literal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_String_Literal, string_literal)},
      },
    },

    // Diag_Unclosed_JSX_String_Literal
    {
      .variables = {
        {.name = "string_literal_begin", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_JSX_String_Literal, string_literal_begin)},
      },
    },

    // Diag_Unclosed_Template
    {
      .variables = {
        {.name = "incomplete_template", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unclosed_Template, incomplete_template)},
      },
    },

    // Diag_Unexpected_At_Character
    {
      .variables = {
        {.name = "character", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_At_Character, character)},
      },
    },

    // Diag_Unexpected_Arrow_After_Expression
    {
      .variables = {
        {.name = "arrow", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Arrow_After_Expression, arrow)},
        {.name = "expression", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Arrow_After_Expression, expression)},
      },
    },

    // Diag_Unexpected_Arrow_After_Literal
    {
      .variables = {
        {.name = "arrow", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Arrow_After_Literal, arrow)},
        {.name = "literal_parameter", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Arrow_After_Literal, literal_parameter)},
      },
    },

    // Diag_Unexpected_Backslash_In_Identifier
    {
      .variables = {
        {.name = "backslash", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Backslash_In_Identifier, backslash)},
      },
    },

    // Diag_Unexpected_Case_Outside_Switch_Statement
    {
      .variables = {
        {.name = "case_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Case_Outside_Switch_Statement, case_token)},
      },
    },

    // Diag_Unexpected_Characters_In_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Characters_In_Number, characters)},
      },
    },

    // Diag_Unexpected_Control_Character
    {
      .variables = {
        {.name = "character", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Control_Character, character)},
      },
    },

    // Diag_Unexpected_Characters_In_Binary_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Characters_In_Binary_Number, characters)},
      },
    },

    // Diag_Unexpected_Characters_In_Octal_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Characters_In_Octal_Number, characters)},
      },
    },

    // Diag_Unexpected_Characters_In_Hex_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Characters_In_Hex_Number, characters)},
      },
    },

    // Diag_Unexpected_Default_Outside_Switch_Statement
    {
      .variables = {
        {.name = "default_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Default_Outside_Switch_Statement, default_token)},
      },
    },

    // Diag_Unexpected_Greater_In_JSX_Text
    {
      .variables = {
        {.name = "greater", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Greater_In_JSX_Text, greater)},
      },
    },

    // Diag_Unexpected_Literal_In_Parameter_List
    {
      .variables = {
        {.name = "literal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Literal_In_Parameter_List, literal)},
      },
    },

    // Diag_Unexpected_Right_Curly_In_JSX_Text
    {
      .variables = {
        {.name = "right_curly", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Right_Curly_In_JSX_Text, right_curly)},
      },
    },

    // Diag_Unexpected_Question_In_Expression
    {
      .variables = {
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Question_In_Expression, question)},
      },
    },

    // Diag_Unexpected_Question_When_Destructuring
    {
      .variables = {
        {.name = "question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Question_When_Destructuring, question)},
      },
    },

    // Diag_Unexpected_Semicolon_In_C_Style_For_Loop
    {
      .variables = {
        {.name = "semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Semicolon_In_C_Style_For_Loop, semicolon)},
      },
    },

    // Diag_Unexpected_Semicolon_In_For_In_Loop
    {
      .variables = {
        {.name = "semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Semicolon_In_For_In_Loop, semicolon)},
      },
    },

    // Diag_Unexpected_Semicolon_In_For_Of_Loop
    {
      .variables = {
        {.name = "semicolon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Semicolon_In_For_Of_Loop, semicolon)},
      },
    },

    // Diag_Unopened_Block_Comment
    {
      .variables = {
        {.name = "comment_close", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unopened_Block_Comment, comment_close)},
      },
    },

    // Diag_Unused_Variable_Shadows
    {
      .variables = {
        {.name = "shadowing_declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unused_Variable_Shadows, shadowing_declaration)},
        {.name = "shadowed_declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unused_Variable_Shadows, shadowed_declaration)},
      },
    },

    // Diag_No_Digits_In_Binary_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_No_Digits_In_Binary_Number, characters)},
      },
    },

    // Diag_No_Digits_In_Hex_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_No_Digits_In_Hex_Number, characters)},
      },
    },

    // Diag_No_Digits_In_Octal_Number
    {
      .variables = {
        {.name = "characters", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_No_Digits_In_Octal_Number, characters)},
      },
    },

    // Diag_Non_Null_Assertion_Not_Allowed_In_Parameter
    {
      .variables = {
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Non_Null_Assertion_Not_Allowed_In_Parameter, bang)},
      },
    },

    // Diag_Unexpected_Hash_Character
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Hash_Character, where)},
      },
    },

    // Diag_Unexpected_Bom_Before_Shebang
    {
      .variables = {
        {.name = "bom", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Bom_Before_Shebang, bom)},
      },
    },

    // Diag_Unexpected_Identifier_In_Expression
    {
      .variables = {
        {.name = "unexpected", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Identifier_In_Expression, unexpected)},
      },
    },

    // Diag_Unexpected_Token
    {
      .variables = {
        {.name = "token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Token, token)},
      },
    },

    // Diag_Unexpected_Token_After_Export
    {
      .variables = {
        {.name = "unexpected_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Token_After_Export, unexpected_token)},
      },
    },

    // Diag_Unexpected_Token_In_Variable_Declaration
    {
      .variables = {
        {.name = "unexpected_token", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Token_In_Variable_Declaration, unexpected_token)},
      },
    },

    // Diag_Unmatched_Indexing_Bracket
    {
      .variables = {
        {.name = "left_square", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unmatched_Indexing_Bracket, left_square)},
      },
    },

    // Diag_Unmatched_Parenthesis
    {
      .variables = {
        {.name = "where", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unmatched_Parenthesis, where)},
      },
    },

    // Diag_Unmatched_Right_Curly
    {
      .variables = {
        {.name = "right_curly", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unmatched_Right_Curly, right_curly)},
      },
    },

    // Diag_Use_Of_Undeclared_Parameter_In_Type_Predicate
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Use_Of_Undeclared_Parameter_In_Type_Predicate, name)},
      },
    },

    // Diag_Use_Of_Undeclared_Type
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Use_Of_Undeclared_Type, name)},
      },
    },

    // Diag_Use_Of_Undeclared_Variable
    {
      .variables = {
        {.name = "name", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Use_Of_Undeclared_Variable, name)},
      },
    },

    // Diag_Variable_Used_Before_Declaration
    {
      .variables = {
        {.name = "use", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Variable_Used_Before_Declaration, use)},
        {.name = "declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Variable_Used_Before_Declaration, declaration)},
      },
    },

    // Diag_Function_Call_Before_Declaration_In_Block_Scope
    {
      .variables = {
        {.name = "use", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Function_Call_Before_Declaration_In_Block_Scope, use)},
        {.name = "declaration", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Function_Call_Before_Declaration_In_Block_Scope, declaration)},
      },
    },

    // Diag_Import_Cannot_Have_Declare_Keyword
    {
      .variables = {
        {.name = "declare_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Import_Cannot_Have_Declare_Keyword, declare_keyword)},
      },
    },

    // Diag_Interface_Fields_Cannot_Have_Initializers
    {
      .variables = {
        {.name = "equal", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Fields_Cannot_Have_Initializers, equal)},
      },
    },

    // Diag_Interface_Methods_Cannot_Be_Async
    {
      .variables = {
        {.name = "async_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Methods_Cannot_Be_Async, async_keyword)},
      },
    },

    // Diag_Interface_Methods_Cannot_Be_Generators
    {
      .variables = {
        {.name = "star", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Methods_Cannot_Be_Generators, star)},
      },
    },

    // Diag_Interface_Methods_Cannot_Contain_Bodies
    {
      .variables = {
        {.name = "body_start", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Methods_Cannot_Contain_Bodies, body_start)},
      },
    },

    // Diag_Interface_Properties_Cannot_Be_Explicitly_Public
    {
      .variables = {
        {.name = "public_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Properties_Cannot_Be_Explicitly_Public, public_keyword)},
      },
    },

    // Diag_Interface_Properties_Cannot_Be_Private
    {
      .variables = {
        {.name = "property_name_or_private_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Properties_Cannot_Be_Private, property_name_or_private_keyword)},
      },
    },

    // Diag_Interface_Properties_Cannot_Be_Protected
    {
      .variables = {
        {.name = "protected_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Properties_Cannot_Be_Protected, protected_keyword)},
      },
    },

    // Diag_Interface_Properties_Cannot_Be_Static
    {
      .variables = {
        {.name = "static_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Interface_Properties_Cannot_Be_Static, static_keyword)},
      },
    },

    // Diag_Invalid_Break
    {
      .variables = {
        {.name = "break_statement", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Break, break_statement)},
      },
    },

    // Diag_Invalid_Continue
    {
      .variables = {
        {.name = "continue_statement", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Invalid_Continue, continue_statement)},
      },
    },

    // Diag_Pointless_String_Comp_Contains_Lower
    {
      .variables = {
        {.name = "span_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_String_Comp_Contains_Lower, span_operator)},
      },
    },

    // Diag_Pointless_String_Comp_Contains_Upper
    {
      .variables = {
        {.name = "span_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_String_Comp_Contains_Upper, span_operator)},
      },
    },

    // Diag_Pointless_Strict_Comp_Against_Array_Literal
    {
      .variables = {
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Strict_Comp_Against_Array_Literal, equals_operator)},
      },
    },

    // Diag_Pointless_Comp_Against_Arrow_Function
    {
      .variables = {
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Comp_Against_Arrow_Function, equals_operator)},
        {.name = "comparison_result", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Pointless_Comp_Against_Arrow_Function, comparison_result)},
      },
    },

    // Diag_Pointless_Comp_Against_Class_Literal
    {
      .variables = {
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Comp_Against_Class_Literal, equals_operator)},
        {.name = "comparison_result", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Pointless_Comp_Against_Class_Literal, comparison_result)},
      },
    },

    // Diag_Pointless_Strict_Comp_Against_Empty_Array_Literal
    {
      .variables = {
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Strict_Comp_Against_Empty_Array_Literal, equals_operator)},
        {.name = "comparison_result", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Pointless_Strict_Comp_Against_Empty_Array_Literal, comparison_result)},
      },
    },

    // Diag_Pointless_Comp_Against_Object_Literal
    {
      .variables = {
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Comp_Against_Object_Literal, equals_operator)},
        {.name = "comparison_result", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Pointless_Comp_Against_Object_Literal, comparison_result)},
      },
    },

    // Diag_Pointless_Comp_Against_Regular_Expression_Literal
    {
      .variables = {
        {.name = "equals_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Comp_Against_Regular_Expression_Literal, equals_operator)},
        {.name = "comparison_result", .type = Diagnostic_Arg_Type::string8_view, .offset = offsetof(Diag_Pointless_Comp_Against_Regular_Expression_Literal, comparison_result)},
      },
    },

    // Diag_Unexpected_Function_Parameter_Is_Parenthesized
    {
      .variables = {
        {.name = "left_paren_to_right_paren", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Function_Parameter_Is_Parenthesized, left_paren_to_right_paren)},
      },
    },

    // Diag_Unexpected_Comma_After_Field_Initialization
    {
      .variables = {
        {.name = "comma", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Comma_After_Field_Initialization, comma)},
      },
    },

    // Diag_Unexpected_Colon_After_Generic_Definition
    {
      .variables = {
        {.name = "colon", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Colon_After_Generic_Definition, colon)},
      },
    },

    // Diag_Pointless_Nullish_Coalescing_Operator
    {
      .variables = {
        {.name = "question_question", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Pointless_Nullish_Coalescing_Operator, question_question)},
      },
    },

    // Diag_Bang_Equal_Equal_Interpreted_As_Non_Null_Assertion
    {
      .variables = {
        {.name = "unexpected_space", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Bang_Equal_Equal_Interpreted_As_Non_Null_Assertion, unexpected_space)},
        {.name = "bang", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Bang_Equal_Equal_Interpreted_As_Non_Null_Assertion, bang)},
      },
    },

    // Diag_Unexpected_Space_Between_Bang_And_Equal_Equal
    {
      .variables = {
        {.name = "unexpected_space", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Unexpected_Space_Between_Bang_And_Equal_Equal, unexpected_space)},
      },
    },

    // Diag_JSX_Prop_Is_Missing_Expression
    {
      .variables = {
        {.name = "left_brace_to_right_brace", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_JSX_Prop_Is_Missing_Expression, left_brace_to_right_brace)},
      },
    },

    // Diag_Keyword_Contains_Escape_Characters
    {
      .variables = {
        {.name = "escape_character_in_keyword", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Keyword_Contains_Escape_Characters, escape_character_in_keyword)},
      },
    },

    // Diag_Access_Specifier_Must_Precede_Other_Modifiers
    {
      .variables = {
        {.name = "second_modifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Access_Specifier_Must_Precede_Other_Modifiers, second_modifier)},
        {.name = "first_modifier", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Access_Specifier_Must_Precede_Other_Modifiers, first_modifier)},
      },
    },

    // Diag_Spread_Must_Precede_Expression
    {
      .variables = {
        {.name = "spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Spread_Must_Precede_Expression, spread)},
      },
    },

    // Diag_Spread_Must_Precede_Variable_Name
    {
      .variables = {
        {.name = "spread", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Spread_Must_Precede_Variable_Name, spread)},
      },
    },

    // Diag_Variable_Assigned_To_Self_Is_Noop
    {
      .variables = {
        {.name = "assignment_statement", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Variable_Assigned_To_Self_Is_Noop, assignment_statement)},
      },
    },

    // Diag_Xor_Used_As_Exponentiation
    {
      .variables = {
        {.name = "xor_operator", .type = Diagnostic_Arg_Type::source_code_span, .offset = offsetof(Diag_Xor_Used_As_Exponentiation, xor_operator)},
      },
    },
};

const Diagnostic_Info_Debug &get_diagnostic_info_debug(Diag_Type type) noexcept {
  return all_diagnostic_infos_debug[static_cast<std::ptrdiff_t>(type)];
}
}

// quick-lint-js finds bugs in JavaScript programs.
// Copyright (C) 2020  Matthew "strager" Glazar
//
// This file is part of quick-lint-js.
//
// quick-lint-js is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// quick-lint-js is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with quick-lint-js.  If not, see <https://www.gnu.org/licenses/>.
